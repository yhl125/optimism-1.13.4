version: 2.1

parameters:
  default_docker_image:
    type: string
    default: cimg/base:2024.01
  base_image:
    type: string
    default: default
  # The dispatch parameters are used to manually dispatch pipelines that normally only run post-merge on develop
  # from the CircleCI UI. Example configuration:
  #   when:
  #     or:
  #       - equal: [ "develop", <<pipeline.git.branch>> ]
  #       - equal: [ true, <<pipeline.parameters.main_dispatch>> ]
  # Add a new `*_dispatch` parameter for any pipeline you want manual dispatch for.
  main_dispatch:
    type: boolean
    default: true # default to running main in case the manual run cancelled an automatic run
  fault_proofs_dispatch:
    type: boolean
    default: false
  reproducibility_dispatch:
    type: boolean
    default: false
  diff_asterisc_bytecode_dispatch:
    type: boolean
    default: false
  kontrol_dispatch:
    type: boolean
    default: false
  cannon_full_test_dispatch:
    type: boolean
    default: false
  sdk_dispatch:
    type: boolean
    default: false
  docker_publish_dispatch:
    type: boolean
    default: false
  publish_contract_artifacts_dispatch:
    type: boolean
    default: false
  stale_check_dispatch:
    type: boolean
    default: false
  contracts_coverage_dispatch:
    type: boolean
    default: false
  acceptance_tests_dispatch:
    type: boolean
    default: false
  github-event-type:
    type: string
    default: "__not_set__"
  github-event-action:
    type: string
    default: "__not_set__"
  github-event-base64:
    type: string
    default: "__not_set__"
  devnet-metrics-collect:
    type: boolean
    default: false

orbs:
  go: circleci/go@1.8.0
  gcp-cli: circleci/gcp-cli@3.0.1
  slack: circleci/slack@5.1.1
  shellcheck: circleci/shellcheck@3.2.0
  codecov: codecov/codecov@5.0.3
  utils: ethereum-optimism/circleci-utils@1.0.19
  docker: circleci/docker@2.8.2
  github-cli: circleci/github-cli@2.7.0

commands:
  gcp-oidc-authenticate:
    description: "Authenticate with GCP using a CircleCI OIDC token."
    parameters:
      project_id:
        type: env_var_name
        default: GCP_PROJECT_ID
      workload_identity_pool_id:
        type: env_var_name
        default: GCP_WIP_ID
      workload_identity_pool_provider_id:
        type: env_var_name
        default: GCP_WIP_PROVIDER_ID
      service_account_email:
        type: env_var_name
        default: GCP_SERVICE_ACCOUNT_EMAIL
      gcp_cred_config_file_path:
        type: string
        default: /home/circleci/gcp_cred_config.json
      oidc_token_file_path:
        type: string
        default: /home/circleci/oidc_token.json
    steps:
      - run:
          name: "Create OIDC credential configuration"
          command: |
            # Store OIDC token in temp file
            echo $CIRCLE_OIDC_TOKEN > << parameters.oidc_token_file_path >>
            # Create a credential configuration for the generated OIDC ID Token
            gcloud iam workload-identity-pools create-cred-config \
                "projects/${<< parameters.project_id >>}/locations/global/workloadIdentityPools/${<< parameters.workload_identity_pool_id >>}/providers/${<< parameters.workload_identity_pool_provider_id >>}"\
                --output-file="<< parameters.gcp_cred_config_file_path >>" \
                --service-account="${<< parameters.service_account_email >>}" \
                --credential-source-file=<< parameters.oidc_token_file_path >>
      - run:
          name: "Authenticate with GCP using OIDC"
          command: |
            # Configure gcloud to leverage the generated credential configuration
            gcloud auth login --brief --cred-file "<< parameters.gcp_cred_config_file_path >>"
            # Configure ADC
            echo "export GOOGLE_APPLICATION_CREDENTIALS='<< parameters.gcp_cred_config_file_path >>'" | tee -a "$BASH_ENV"

  check-changed:
    description: "Conditionally halts a step if certain modules change"
    parameters:
      patterns:
        type: string
        description: "Comma-separated list of dependencies"
      no_go_deps:
        type: string
        default: ""
        description: "If set, does not trigger on `go.mod` / `go.sum` changes."
    steps:
      - run:
          name: "Check for changes"
          environment:
            CHECK_CHANGED_NO_GO_DEPS: "<<parameters.no_go_deps>>"
          command: |
            cd ops/check-changed
            pip3 install -r requirements.txt
            python3 main.py "<<parameters.patterns>>"

  install-contracts-dependencies:
    description: "Install the dependencies for the smart contracts"
    parameters:
      solc_versions:
        description: "The versions of solc to install"
        type: string
        default: "0.8.15,0.8.19,0.8.25,0.8.28"
    steps:
      - restore_cache:
          keys:
            # use mise.toml to anchor on the underlying forge/svm versions
            - svm-cache-{{ checksum "mise.toml" }}-<<parameters.solc_versions>>
      - run:
          name: Install solc compilers
          command: |
            for version in $(echo "<<parameters.solc_versions>>" | tr ',' '\n'); do
              svm which $version || svm install $version
            done
      - save_cache:
          key: svm-cache-{{ checksum "mise.toml" }}-<<parameters.solc_versions>>
          paths:
            - ~/.svm
      - run:
          name: Install dependencies
          command: |
            # Manually craft the submodule update command in order to take advantage
            # of the -j parameter, which speeds it up a lot.
            git submodule update --init --recursive --force -j 8
          working_directory: packages/contracts-bedrock

  # Notifies us on Slack a build fails on develop
  notify-failures-on-develop:
    description: "Notify Slack"
    parameters:
      channel:
        type: string
        default: C03N11M0BBN
      mentions:
        type: string
        default: ""
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          event: fail
          template: basic_fail_1
          branch_pattern: develop
          mentions: "<< parameters.mentions >>"

  # Notifies us on Discord when a build fails on develop
  # For Discord to properly trigger notifications, mentions need to be in the format:
  # User mentions: <@USER_ID>
  # Role mentions: <@&ROLE_ID>
  # Example: <@&1346448413172170807> is how we'd tag the Protocol DevX Pod
  discord-notification-failures-on-develop:
    description: "Notify Discord"
    parameters:
      message:
        type: string
        default: ""
      mentions:
        type: string
        default: ""
    steps:
      - run:
          name: "Notify Discord"
          command: |
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              # Format message for Discord with better structure and formatting
              DISCORD_MESSAGE="ðŸš¨ **CI Failure Detected** ðŸš¨\n"
              DISCORD_MESSAGE="${DISCORD_MESSAGE}> **Repository:** \`${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}\`\n"
              DISCORD_MESSAGE="${DISCORD_MESSAGE}> **Branch:** \`${CIRCLE_BRANCH}\`\n"
              DISCORD_MESSAGE="${DISCORD_MESSAGE}> **Job:** \`${CIRCLE_JOB}\`\n"
              DISCORD_MESSAGE="${DISCORD_MESSAGE}> **Build Link:** ${CIRCLE_BUILD_URL}"

              # Add failure reason if provided
              if [ ! -z "<< parameters.message >>" ]; then
                DISCORD_MESSAGE="${DISCORD_MESSAGE}\n\n**Failure message:** << parameters.message >>"
              fi

              # Add mentions if provided
              if [ ! -z "<< parameters.mentions >>" ]; then
                DISCORD_MESSAGE="${DISCORD_MESSAGE}\n\n**Attention:** << parameters.mentions >>"
              fi

              # Post to Discord webhook
              curl -X POST -H "Content-Type: application/json" \
                -d "{\"content\": \"${DISCORD_MESSAGE}\"}" "${notify_ci}"
            fi
          when: on_fail


  run-contracts-check:
    parameters:
      command:
        description: Just command that runs the check
        type: string
    steps:
      - run:
          name: <<parameters.command>>
          command: |
            git reset --hard
            git clean -df
            just <<parameters.command>>
            git status --porcelain
            [ -z "$(git status --porcelain)" ] || exit 1
          working_directory: packages/contracts-bedrock
          when: always
          environment:
            FOUNDRY_PROFILE: ci

jobs:
  cannon-go-lint-and-test:
    machine: true
    resource_class: ethereum-optimism/latitude-1
    parameters:
      skip_slow_tests:
        type: boolean
        default: false
      no_output_timeout:
        description: Timeout for when CircleCI kills the job if there's no output
        type: string
        default: 10m
      notify:
        description: Whether to notify on failure
        type: boolean
        default: false
    steps:
      - utils/checkout-with-mise
      - check-changed:
          patterns: cannon,packages/contracts-bedrock/src/cannon,op-preimage,go.mod
      - attach_workspace:
          at: "."
      - run:
          name: prep Cannon results dir
          command: |
            mkdir -p ./tmp/test-results
            mkdir -p ./tmp/testlogs
      - run:
          name: build Cannon example binaries
          command: make elf # only compile ELF binaries with Go, we do not have MIPS GCC for creating the debug-dumps.
          working_directory: cannon/testdata
      - run:
          name: Cannon Go lint
          command: |
            make lint
          working_directory: cannon
      - run:
          name: Cannon Go 64-bit tests
          no_output_timeout: <<parameters.no_output_timeout>>
          command: |
            export SKIP_SLOW_TESTS="<<parameters.skip_slow_tests>>"
            TIMEOUT="10m"
            if [ "$SKIP_SLOW_TESTS" = "false" ]; then
              TIMEOUT="45m"
            fi
            gotestsum --format=testname --junitfile=../tmp/test-results/cannon-64.xml --jsonfile=../tmp/testlogs/log-64.json \
            -- -timeout=$TIMEOUT -parallel=$(nproc) -coverpkg=github.com/ethereum-optimism/optimism/cannon/... -coverprofile=coverage-64.out ./...
          working_directory: cannon
      - codecov/upload:
          disable_search: true
          files: ./cannon/coverage-64.out
          flags: cannon-go-tests-64
      - store_test_results:
          path: ./tmp/test-results
      - store_artifacts:
          path: ./tmp/testlogs
          when: always
      - when:
          condition: <<parameters.notify>>
          steps:
            - notify-failures-on-develop:
                mentions: "@proofs-team"

  diff-asterisc-bytecode:
    machine: true
    resource_class: ethereum-optimism/latitude-1
    steps:
      - utils/checkout-with-mise
      - run:
          name: Check `RISCV.sol` bytecode
          working_directory: packages/contracts-bedrock
          command: |
            # Clone asterisc @ the pinned version to fetch remote `RISCV.sol`
            ASTERISC_REV="v$(yq '.tools.asterisc' ../../mise.toml)"
            REMOTE_ASTERISC_PATH="./src/vendor/asterisc/RISCV_Remote.sol"
            git clone https://github.com/ethereum-optimism/asterisc \
              -b $ASTERISC_REV && \
              cp ./asterisc/rvsol/src/RISCV.sol $REMOTE_ASTERISC_PATH

            # Replace import paths
            sed -i -e 's/@optimism\///' $REMOTE_ASTERISC_PATH
            # Replace legacy interface paths
            sed -i -e 's/src\/cannon\/interfaces\//interfaces\/cannon\//g' $REMOTE_ASTERISC_PATH
            sed -i -e 's/src\/dispute\/interfaces\//interfaces\/dispute\//g' $REMOTE_ASTERISC_PATH
            # Replace contract name
            sed -i -e 's/contract RISCV/contract RISCV_Remote/' $REMOTE_ASTERISC_PATH

            # Install deps
            forge install

            # Diff bytecode, with both contracts compiled in the local environment.
            REMOTE_ASTERISC_CODE="$(forge inspect RISCV_Remote bytecode | tr -d '\n')"
            LOCAL_ASTERISC_CODE="$(forge inspect RISCV bytecode | tr -d '\n')"
            if [ "$REMOTE_ASTERISC_CODE" != "$LOCAL_ASTERISC_CODE" ]; then
              echo "Asterisc bytecode mismatch. Local version does not match remote. Diff:"
              diff <(echo "$REMOTE_ASTERISC_CODE") <(echo "$LOCAL_ASTERISC_CODE")
            else
              echo "Asterisc version up to date."
            fi
      - notify-failures-on-develop:
          mentions: "@clabby @proofs-team"

  contracts-bedrock-build:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: large
    parameters:
      build_args:
        description: Forge build arguments
        type: string
        default: ""
      profile:
        description: Profile to use for building
        type: string
        default: ci
    steps:
      - utils/checkout-with-mise
      - install-contracts-dependencies
      - run:
          name: Print forge version
          command: forge --version
      - run:
          name: Pull artifacts
          command: bash scripts/ops/pull-artifacts.sh
          working_directory: packages/contracts-bedrock
      - run:
          name: Build contracts
          command: forge build <<parameters.build_args>>
          environment:
            FOUNDRY_PROFILE: <<parameters.profile>>
          working_directory: packages/contracts-bedrock
      - persist_to_workspace:
          root: "."
          paths:
            - "packages/contracts-bedrock/cache"
            - "packages/contracts-bedrock/artifacts"
            - "packages/contracts-bedrock/forge-artifacts"
      - notify-failures-on-develop

  check-kontrol-build:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: xlarge
    steps:
      - utils/checkout-with-mise
      - attach_workspace: { at: "." }
      - install-contracts-dependencies
      - check-changed:
          patterns: contracts-bedrock
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run Kontrol build
          command: just kontrol-summary-full
          working_directory: packages/contracts-bedrock
      - run:
          name: Build Kontrol summary files
          command: forge build ./test/kontrol/proofs
          working_directory: packages/contracts-bedrock
      - notify-failures-on-develop

  docker-build:
    environment:
      DOCKER_BUILDKIT: 1
    parameters:
      docker_tags:
        description: Docker image tags, comma-separated
        type: string
      docker_name:
        description: "Docker buildx bake target"
        type: string
        default: ""
      registry:
        description: Docker registry
        type: string
        default: "us-docker.pkg.dev"
      repo:
        description: Docker repo
        type: string
        default: "oplabs-tools-artifacts/images"
      save_image_tag:
        description: Save docker image with given tag
        type: string
        default: ""
      platforms:
        description: Platforms to build for, comma-separated
        type: string
        default: "linux/amd64"
      publish:
        description: Publish the docker image (multi-platform, all tags)
        type: boolean
        default: false
      release:
        description: Run the release script
        type: boolean
        default: false
      resource_class:
        description: Docker resource class
        type: string
        default: medium
    machine:
      image: <<pipeline.parameters.base_image>>
      resource_class: "<<parameters.resource_class>>"
      docker_layer_caching: true # we rely on this for faster builds, and actively warm it up for builds with common stages
    steps:
      - utils/checkout-with-mise
      - attach_workspace:
          at: /tmp/docker_images
      - run:
          command: mkdir -p /tmp/docker_images
      - when:
          condition:
            or:
              - "<<parameters.publish>>"
              - "<<parameters.release>>"
          steps:
            - gcp-cli/install
      - when:
          condition:
            or:
              - "<<parameters.publish>>"
              - "<<parameters.release>>"
          steps:
            - gcp-oidc-authenticate
      - run:
          name: Build
          command: |
            # Check to see if DOCKER_HUB_READ_ONLY_TOKEN is set (i.e. we are in repo) before attempting to use secrets.
            # Building should work without this read only login, but may get rate limited.
            if [[ -v DOCKER_HUB_READ_ONLY_TOKEN ]]; then
              echo "$DOCKER_HUB_READ_ONLY_TOKEN" | docker login -u "$DOCKER_HUB_READ_ONLY_USER" --password-stdin
            fi

            export REGISTRY="<<parameters.registry>>"
            export REPOSITORY="<<parameters.repo>>"
            export IMAGE_TAGS="$(echo -ne "<<parameters.docker_tags>>" | sed "s/[^a-zA-Z0-9\n,]/-/g")"
            export GIT_COMMIT="$(git rev-parse HEAD)"
            export GIT_DATE="$(git show -s --format='%ct')"
            export PLATFORMS="<<parameters.platforms>>"

            echo "Checking git tags pointing at $GIT_COMMIT:"
            tags_at_commit=$(git tag --points-at $GIT_COMMIT)
            echo "Tags at commit:\n$tags_at_commit"

            filtered_tags=$(echo "$tags_at_commit" | grep "^<<parameters.docker_name>>/" || true)
            echo "Filtered tags: $filtered_tags"

            if [ -z "$filtered_tags" ]; then
              export GIT_VERSION="untagged"
            else
              sorted_tags=$(echo "$filtered_tags" | sed "s/<<parameters.docker_name>>\///" | sort -V)
              echo "Sorted tags: $sorted_tags"

              # prefer full release tag over "-rc" release candidate tag if both exist
              full_release_tag=$(echo "$sorted_tags" | grep -v -- "-rc" || true)
              if [ -z "$full_release_tag" ]; then
                export GIT_VERSION=$(echo "$sorted_tags" | tail -n 1)
              else
                export GIT_VERSION=$(echo "$full_release_tag" | tail -n 1)
              fi
            fi

            echo "Setting GIT_VERSION=$GIT_VERSION"

            # Create, start (bootstrap) and use a *named* docker builder
            # This allows us to cross-build multi-platform,
            # and naming allows us to use the DLC (docker-layer-cache)
            docker buildx create --driver=docker-container --name=buildx-build --bootstrap --use

            DOCKER_OUTPUT_DESTINATION=""
            if [ "<<parameters.publish>>" == "true" ]; then
              gcloud auth configure-docker <<parameters.registry>>
              echo "Building for platforms $PLATFORMS and then publishing to registry"
              DOCKER_OUTPUT_DESTINATION="--push"
              if [ "<<parameters.save_image_tag>>" != "" ]; then
                echo "ERROR: cannot save image to docker when publishing to registry"
                exit 1
              fi
            else
              if [ "<<parameters.save_image_tag>>" == "" ]; then
                echo "Running $PLATFORMS build without destination (cache warm-up)"
                DOCKER_OUTPUT_DESTINATION=""
              elif [[ $PLATFORMS == *,* ]]; then
                echo "ERROR: cannot perform multi-arch (platforms: $PLATFORMS) build while also loading the result into regular docker"
                exit 1
              else
                echo "Running single-platform $PLATFORMS build and loading into docker"
                DOCKER_OUTPUT_DESTINATION="--load"
              fi
            fi

            # Let them cook!
            docker buildx bake \
              --progress plain \
              --builder=buildx-build \
              -f docker-bake.hcl \
              $DOCKER_OUTPUT_DESTINATION \
              <<parameters.docker_name>>

          no_output_timeout: 45m
      - when:
          condition: "<<parameters.publish>>"
          steps:
            - notify-failures-on-develop
      - when:
          condition: "<<parameters.save_image_tag>>"
          steps:
            - run:
                name: Save
                command: |
                  IMAGE_NAME="<<parameters.registry>>/<<parameters.repo>>/<<parameters.docker_name>>:<<parameters.save_image_tag>>"
                  docker save -o /tmp/docker_images/<<parameters.docker_name>>.tar $IMAGE_NAME
            - persist_to_workspace:
                root: /tmp/docker_images
                paths: # only write the one file, to avoid concurrent workspace-file additions
                  - "<<parameters.docker_name>>.tar"
      - when:
          condition: "<<parameters.release>>"
          steps:
            - run:
                name: Tag
                command: |
                  ./ops/scripts/ci-docker-tag-op-stack-release.sh <<parameters.registry>>/<<parameters.repo>> $CIRCLE_TAG $CIRCLE_SHA1
      - when:
          condition:
            or:
              - and:
                  - "<<parameters.publish>>"
                  - "<<parameters.release>>"
              - and:
                  - "<<parameters.publish>>"
                  - equal: [develop, << pipeline.git.branch >>]
          steps:
            - gcp-oidc-authenticate:
                service_account_email: GCP_SERVICE_ATTESTOR_ACCOUNT_EMAIL
            - run:
                name: Sign
                command: |
                  VER=$(yq '.tools.binary_signer' mise.toml)
                  wget -O - "https://github.com/ethereum-optimism/binary_signer/archive/refs/tags/v${VER}.tar.gz" | tar xz
                  cd "binary_signer-${VER}/signer"

                  IMAGE_PATH="<<parameters.registry>>/<<parameters.repo>>/<<parameters.docker_name>>:<<pipeline.git.revision>>"
                  echo $IMAGE_PATH
                  pip3 install -r requirements.txt

                  python3 ./sign_image.py --command="sign"\
                      --attestor-project-name="$ATTESTOR_PROJECT_NAME"\
                      --attestor-name="$ATTESTOR_NAME"\
                      --image-path="$IMAGE_PATH"\
                      --signer-logging-level="INFO"\
                      --attestor-key-id="//cloudkms.googleapis.com/v1/projects/$ATTESTOR_PROJECT_NAME/locations/global/keyRings/$ATTESTOR_NAME-key-ring/cryptoKeys/$ATTESTOR_NAME-key/cryptoKeyVersions/1"

  # Verify newly published images (built on AMD machine) will run on ARM
  check-cross-platform:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: arm.medium
    parameters:
      registry:
        description: Docker registry
        type: string
        default: "us-docker.pkg.dev"
      repo:
        description: Docker repo
        type: string
        default: "oplabs-tools-artifacts/images"
      op_component:
        description: "Name of op-stack component (e.g. op-node)"
        type: string
        default: ""
      docker_tag:
        description: "Tag of docker image"
        type: string
        default: "<<pipeline.git.revision>>"
    steps:
      - setup_remote_docker
      - run:
          name: "Verify Image Platform"
          command: |
            image_name="<<parameters.registry>>/<<parameters.repo>>/<<parameters.op_component>>:<<parameters.docker_tag>>"
            echo "Retrieving Docker image manifest: $image_name"
            MANIFEST=$(docker manifest inspect $image_name)

            echo "Verifying 'linux/arm64' is supported..."
            SUPPORTED_PLATFORM=$(echo "$MANIFEST" | jq -r '.manifests[] | select(.platform.architecture == "arm64" and .platform.os == "linux")')
            echo $SUPPORT_PLATFORM
            if [ -z "$SUPPORTED_PLATFORM" ]; then
              echo "Platform 'linux/arm64' not supported by this image"
              exit 1
            fi
      - run:
          name: "Pull and run docker image"
          command: |
            image_name="<<parameters.registry>>/<<parameters.repo>>/<<parameters.op_component>>:<<parameters.docker_tag>>"
            docker pull $image_name || exit 1
            docker run $image_name <<parameters.op_component>> --version || exit 1

  contracts-bedrock-frozen-code:
    machine: true
    resource_class: ethereum-optimism/latitude-1
    steps:
      - utils/checkout-with-mise
      - attach_workspace: { at: "." }
      - install-contracts-dependencies
      - check-changed:
          patterns: contracts-bedrock
      - run:
          name: Check if target branch is develop
          command: |
            # Get PR number from CIRCLE_PULL_REQUEST
            PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | rev | cut -d/ -f1 | rev)

            # Use GitHub API to get target branch
            TARGET_BRANCH=$(curl -s "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .base.ref)

            # If the target branch is not develop, do not run this check
            if [ "$TARGET_BRANCH" != "develop" ]; then
              echo "Target branch is not develop, skipping frozen files check"
              circleci-agent step halt
            fi
      - run:
          name: Check if PR has exempt label
          command: |
            # Get PR number from CIRCLE_PULL_REQUEST
            PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | rev | cut -d/ -f1 | rev)

            # Use GitHub API to get labels
            LABELS=$(curl -s "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${PR_NUMBER}" | jq -r .labels)

            # If the PR has the "M-exempt-frozen-files" label, do not run this check
            if echo $LABELS | jq -e 'any(.[]; .name == "M-exempt-frozen-files")' > /dev/null; then
              echo "Skipping frozen files check, PR has exempt label"
              circleci-agent step halt
            fi
      - run:
          name: Check frozen files
          command: just check-frozen-code
          working_directory: packages/contracts-bedrock

  contracts-bedrock-tests:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: xlarge
    parameters:
      test_list:
        description: List of test files to run
        type: string
      test_command:
        description: Test command to execute (test or coverage)
        type: string
        default: test
      test_flags:
        description: Additional flags to pass to the test command
        type: string
        default: ""
      test_timeout:
        description: Timeout for running tests
        type: string
        default: 15m
      test_profile:
        description: Profile to use for testing
        type: string
        default: ci
    steps:
      - utils/checkout-with-mise
      - attach_workspace: { at: "." }
      - install-contracts-dependencies
      - run:
          name: Check if test list is empty
          command: |
            TEST_FILES=$(<<parameters.test_list>>)
            if [ -z "$TEST_FILES" ]; then
              echo "No test files to run. Exiting early."
              circleci-agent step halt
            fi
          working_directory: packages/contracts-bedrock
      - check-changed:
          patterns: contracts-bedrock,op-node
      - run:
          name: Print dependencies
          command: just dep-status
          working_directory: packages/contracts-bedrock
      - run:
          name: Print forge version
          command: forge --version
          working_directory: packages/contracts-bedrock
      - run:
          name: Pull artifacts
          command: bash scripts/ops/pull-artifacts.sh
          working_directory: packages/contracts-bedrock
      - run:
          name: Build go-ffi
          command: just build-go-ffi
          working_directory: packages/contracts-bedrock
      - run:
          name: Run tests
          command: |
            TEST_FILES=$(<<parameters.test_list>>)
            TEST_FILES=$(echo "$TEST_FILES" | circleci tests split --split-by=timings)
            TEST_FILES=$(echo "$TEST_FILES" | sed 's|^test/||')
            MATCH_PATH="./test/{$(echo "$TEST_FILES" | paste -sd "," -)}"
            forge <<parameters.test_command>> <<parameters.test_flags>> --match-path "$MATCH_PATH"
          environment:
            FOUNDRY_PROFILE: <<parameters.test_profile>>
          working_directory: packages/contracts-bedrock
          no_output_timeout: <<parameters.test_timeout>>
      - run:
          name: Print failed test traces
          command: just test-rerun
          environment:
            FOUNDRY_PROFILE: ci
          working_directory: packages/contracts-bedrock
          when: on_fail
      - run:
          name: Lint forge test names
          command: just lint-forge-tests-check-no-build
          working_directory: packages/contracts-bedrock
      - save_cache:
          name: Save Go build cache
          key: golang-build-cache-contracts-bedrock-tests-{{ checksum "go.sum" }}
          paths:
            - "/root/.cache/go-build"
      - notify-failures-on-develop

  contracts-bedrock-coverage:
    circleci_ip_ranges: true
    docker:
        - image: <<pipeline.parameters.default_docker_image>>
    resource_class: 2xlarge
    parameters:
      test_flags:
        description: Additional flags to pass to the test command
        type: string
        default: ""
      test_timeout:
        description: Timeout for running tests
        type: string
        default: 15m
      test_profile:
        description: Profile to use for testing
        type: string
        default: ci
    steps:
      - utils/checkout-with-mise
      - attach_workspace: { at: "." }
      - install-contracts-dependencies
      - check-changed:
          patterns: contracts-bedrock,op-node
      - run:
          name: Print dependencies
          command: just dep-status
          working_directory: packages/contracts-bedrock
      - run:
          name: Print forge version
          command: forge --version
          working_directory: packages/contracts-bedrock
      - run:
          name: Pull artifacts
          command: bash scripts/ops/pull-artifacts.sh
          working_directory: packages/contracts-bedrock
      - run:
          name: Install lcov
          command: |
            sudo apt-get update
            sudo apt-get install -y lcov
      - run:
          name: Write pinned block number for cache key
          command: |
            just print-pinned-block-number > ./pinnedBlockNumber.txt
            cat pinnedBlockNumber.txt
          working_directory: packages/contracts-bedrock
      - restore_cache:
          name: Restore forked state
          key: forked-state-contracts-bedrock-tests-upgrade-{{ checksum "packages/contracts-bedrock/pinnedBlockNumber.txt" }}
      - run:
          name: Run coverage tests
          command: just coverage-lcov-all <<parameters.test_flags>>
          environment:
            FOUNDRY_PROFILE: <<parameters.test_profile>>
            ETH_RPC_URL: https://ci-mainnet-l1-archive.optimism.io
          working_directory: packages/contracts-bedrock
          no_output_timeout: <<parameters.test_timeout>>
      - run:
          name: Print failed test traces
          command: |
            just test-rerun | tee failed-test-traces.log
          environment:
            FOUNDRY_PROFILE: <<parameters.test_profile>>
            ETH_RPC_URL: https://ci-mainnet-l1-archive.optimism.io
          working_directory: packages/contracts-bedrock
          when: on_fail
      - codecov/upload:
          disable_search: true
          files: ./packages/contracts-bedrock/lcov-all.info
          flags: contracts-bedrock-tests
      - store_artifacts:
          path: packages/contracts-bedrock/failed-test-traces.log
          when: on_fail
      - notify-failures-on-develop

  contracts-bedrock-tests-upgrade:
    circleci_ip_ranges: true
    parameters:
      fork_op_chain:
        description: Fork OP Chain
        type: string
        default: "op"
      fork_base_chain:
        description: Fork Base Chain
        type: string
        default: "mainnet"
      fork_base_rpc:
        description: Fork Base RPC
        type: string
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: xlarge
    steps:
      - utils/checkout-with-mise
      - attach_workspace: { at: "." }
      - install-contracts-dependencies
      - check-changed:
          patterns: contracts-bedrock,op-node
      - run:
          name: Print dependencies
          command: just dep-status
          working_directory: packages/contracts-bedrock
      - run:
          name: Print forge version
          command: forge --version
          working_directory: packages/contracts-bedrock
      - run:
          name: Pull artifacts
          command: bash scripts/ops/pull-artifacts.sh
          working_directory: packages/contracts-bedrock
      - run:
          name: Write pinned block number for cache key
          command: |
            just print-pinned-block-number > ./pinnedBlockNumber.txt
            cat pinnedBlockNumber.txt
          environment:
            FORK_BASE_CHAIN: <<parameters.fork_base_chain>>
          working_directory: packages/contracts-bedrock
      - restore_cache:
          name: Restore forked state
          key: forked-state-contracts-bedrock-tests-upgrade-<<parameters.fork_op_chain>>-<<parameters.fork_base_chain>>-{{ checksum "packages/contracts-bedrock/pinnedBlockNumber.txt" }}
      - run:
          name: Run tests
          command: just test-upgrade
          environment:
            FOUNDRY_FUZZ_SEED: 42424242
            FOUNDRY_FUZZ_RUNS: 1
            FOUNDRY_PROFILE: ci
            ETH_RPC_URL: <<parameters.fork_base_rpc>>
            FORK_OP_CHAIN: <<parameters.fork_op_chain>>
            FORK_BASE_CHAIN: <<parameters.fork_base_chain>>
          working_directory: packages/contracts-bedrock
          no_output_timeout: 15m
      - run:
          name: Print failed test traces
          command: |
            just test-upgrade-rerun | tee failed-test-traces.log
          environment:
            FOUNDRY_FUZZ_SEED: 42424242
            FOUNDRY_FUZZ_RUNS: 1
            FOUNDRY_PROFILE: ci
            ETH_RPC_URL: <<parameters.fork_base_rpc>>
            FORK_OP_CHAIN: <<parameters.fork_op_chain>>
            FORK_BASE_CHAIN: <<parameters.fork_base_chain>>
          working_directory: packages/contracts-bedrock
          when: on_fail
      - save_cache:
          name: Save Go build cache
          key: golang-build-cache-contracts-bedrock-tests-{{ checksum "go.sum" }}
          paths:
            - "/root/.cache/go-build"
      - save_cache:
          name: Save forked state
          key: forked-state-contracts-bedrock-tests-upgrade-<<parameters.fork_op_chain>>-<<parameters.fork_base_chain>>-{{ checksum "packages/contracts-bedrock/pinnedBlockNumber.txt" }}
          when: always
          paths:
            - "/root/.foundry/cache"
      - store_artifacts:
          path: packages/contracts-bedrock/failed-test-traces.log
          when: on_fail
      - notify-failures-on-develop

  contracts-bedrock-checks:
    machine: true
    resource_class: ethereum-optimism/latitude-1
    steps:
      - utils/checkout-with-mise
      - attach_workspace: { at: "." }
      - install-contracts-dependencies
      - check-changed:
          patterns: contracts-bedrock,op-node
      - run:
          name: print forge version
          command: forge --version
      - run-contracts-check:
          command: check-kontrol-summaries-unchanged
      - run-contracts-check:
          command: semgrep-test-validity-check
      - run-contracts-check:
          command: semgrep
      - run-contracts-check:
          command: semver-lock-no-build
      - run-contracts-check:
          command: semver-diff-check-no-build
      - run-contracts-check:
          command: validate-deploy-configs
      - run-contracts-check:
          command: lint
      - run-contracts-check:
          command: snapshots-check-no-build
      - run-contracts-check:
          command: interfaces-check-no-build
      - run-contracts-check:
          command: reinitializer-check-no-build
      - run-contracts-check:
          command: size-check
      - run-contracts-check:
          command: unused-imports-check-no-build
      - run-contracts-check:
          command: validate-spacers-no-build
      - run-contracts-check:
          command: opcm-upgrade-checks-no-build

  todo-issues:
    parameters:
      check_closed:
        type: boolean
        default: true
    machine:
      image: <<pipeline.parameters.base_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: Install ripgrep
          command: sudo apt-get install -y ripgrep
      - run:
          name: Check TODO issues
          command: ./ops/scripts/todo-checker.sh --verbose --strict <<#parameters.check_closed>> --check-closed <</parameters.check_closed>>
      - notify-failures-on-develop

  fuzz-golang:
    parameters:
      package_name:
        description: Go package name
        type: string
      on_changes:
        description: changed pattern to fire fuzzer on
        type: string
      uses_artifacts:
        description: should load in foundry artifacts
        type: boolean
        default: false
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: xlarge
    steps:
      - utils/checkout-with-mise
      - check-changed:
          patterns: "<<parameters.package_name>>"
      - attach_workspace:
          at: "."
          if: ${{ uses_artifacts }}
      - run:
          name: Fuzz
          no_output_timeout: 15m
          command: |
            make fuzz
          working_directory: "<<parameters.package_name>>"
      - run:
          name: Copy fuzz artifacts
          command: |
            mkdir -p fuzzdata
            find ./<<parameters.package_name>> -type d -name "fuzz" -exec sh -c 'cp -r "{}"/* fuzzdata/ 2>/dev/null || true' \;
          when: always
      - store_artifacts:
          path: ./fuzzdata
          when: always

  go-lint:
    machine: true
    resource_class: ethereum-optimism/latitude-1
    steps:
      - utils/checkout-with-mise
      - run:
          name: run Go linter
          command: |
            make lint-go
          working_directory: .

  go-tests:
    parameters:
      notify:
        description: Whether to notify on failure
        type: boolean
        default: false
      mentions:
        description: Slack user or group to mention when notifying of failures
        type: string
        default: ""
      resource_class:
        description: Machine resource class
        type: string
        default: ethereum-optimism/latitude-1-go-e2e
      no_output_timeout:
        description: Timeout for when CircleCI kills the job if there's no output
        type: string
        default: 60m
      test_timeout:
        description: Timeout for running tests
        type: string
        default: 10m
      environment_overrides:
        description: Environment overrides
        type: string
        default: ""
      rule:
        description: Rule to run the tests
        type: string
        default: "go-tests-short-ci"
    machine: true
    resource_class: <<parameters.resource_class>>
    steps:
      - utils/checkout-with-mise
      - attach_workspace:
          at: "."
      - run:
          name: Run all Go tests via Makefile
          no_output_timeout: <<parameters.no_output_timeout>>
          command: |
            <<parameters.environment_overrides>>
            export TEST_TIMEOUT=<<parameters.test_timeout>>
            make <<parameters.rule>>
      - codecov/upload:
          disable_search: true
          files: ./coverage.out
      - store_test_results:
          path: ./tmp/test-results
      - run:
          name: Compress test logs
          command: tar -czf testlogs.tar.gz -C ./tmp testlogs
          when: always
      - store_artifacts:
          path: testlogs.tar.gz
          when: always
      - when:
          condition: "<<parameters.notify>>"
          steps:
            - notify-failures-on-develop:
                mentions: "<<parameters.mentions>>"

  go-tests-with-fault-proof-deps:
    parameters:
      notify:
        description: Whether to notify on failure
        type: boolean
        default: false
      mentions:
        description: Slack user or group to mention when notifying of failures
        type: string
        default: ""
      resource_class:
        description: Machine resource class
        type: string
        default: ethereum-optimism/latitude-1-go-e2e
      no_output_timeout:
        description: Timeout for when CircleCI kills the job if there's no output
        type: string
        default: 60m
      test_timeout:
        description: Timeout for running tests
        type: string
        default: 10m
      environment_overrides:
        description: Environment overrides
        type: string
        default: ""
    machine: true
    resource_class: <<parameters.resource_class>>
    steps:
      - utils/checkout-with-mise
      - attach_workspace:
          at: "."
      - run:
          name: build op-program-client
          command: make op-program-client
          working_directory: op-program
      - run:
          name: build op-program-host
          command: make op-program-host
          working_directory: op-program
      - run:
          name: build cannon
          command: make cannon
      - run:
          name: run tests
          no_output_timeout: <<parameters.no_output_timeout>>
          command: |
            <<parameters.environment_overrides>>
            export TEST_TIMEOUT=<<parameters.test_timeout>>
            make go-tests-fraud-proofs-ci
      - codecov/upload:
          disable_search: true
          files: ./coverage.out
      - store_test_results:
          path: ./tmp/test-results
      - run:
          name: Compress test logs
          command: tar -czf testlogs.tar.gz -C ./tmp testlogs
          when: always
      - store_artifacts:
          path: testlogs.tar.gz
          when: always
      - when:
          condition: "<<parameters.notify>>"
          steps:
            - notify-failures-on-develop:
                mentions: "<<parameters.mentions>>"

  op-acceptance-tests:
    parameters:
      devnet:
        description: The name of the devnet to run the acceptance tests against. The devnet must have a recipe defined in kurtosis-devnet/Justfile with the name <devnet>-devnet.
        type: string
        default: ""
      gate:
        description: The gate to run the acceptance tests against. This gate should be defined in op-acceptance-tests/acceptance-tests.yaml.
        type: string
        default: ""
      no_output_timeout:
        description: Timeout for when CircleCI kills the job if there's no output
        type: string
        default: 30m
    machine: true
    resource_class: xlarge
    steps:
      - utils/checkout-with-mise
      - install-contracts-dependencies
      - run:
          name: Setup Kurtosis
          command: |
            echo "Setting up Kurtosis..."

            # Print Kurtosis version
            echo "Using Kurtosis from: $(which kurtosis || echo 'not found')"
            kurtosis version

            # Start Kurtosis engine
            echo "Starting Kurtosis engine..."
            kurtosis engine start || true

            # Clean old instances
            echo "Cleaning old instances..."
            kurtosis clean -a || true

            # Check engine status
            kurtosis engine status || true

            echo "Kurtosis setup complete"
      # Start our devnet
      - run:
          name: Start devnet (<<parameters.devnet>>)
          working_directory: kurtosis-devnet
          command: |
            echo "Starting <<parameters.devnet>> devnet..."
            just <<parameters.devnet>>-devnet

            echo "<<parameters.devnet>> devnet started successfully"

            # Print devnet info for debugging
            kurtosis enclave inspect <<parameters.devnet>>-devnet || true
      # Notify us of a devnet failure
      - when:
          condition: on_fail
          steps:
            - discord-notification-failures-on-develop:
                mentions: "<@&1346448413172170807>" # Protocol DevX Pod
                message: "Devnet <<parameters.devnet>>-devnet failed to start"
      - run:
          name: Stop the job if the devnet failed to start
          command: circleci-agent step halt
          when: on_fail
      # Restore cached Go modules
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-mod-v1-
      # Download Go dependencies
      - run:
          name: Download Go dependencies
          working_directory: op-acceptance-tests
          command: go mod download
      # Prepare the test environment
      - run:
          name: Prepare test environment (compile tests and cache build results)
          working_directory: op-acceptance-tests
          command: go test -v -c -o /dev/null $(go list -f '{{if .TestGoFiles}}{{.ImportPath}}{{end}}' ./tests/...)
      # Run the acceptance tests (if the devnet is running)
      - run:
          name: Run acceptance tests (gate=<<parameters.gate>>)
          working_directory: op-acceptance-tests
          no_output_timeout: 1h
          environment:
            GOFLAGS: "-mod=mod"
            GO111MODULE: "on"
            GOGC: "0"
          command: |
            # Check if the devnet is running before attempting to run tests
            if ! kurtosis enclave ls | grep -q "<<parameters.devnet>>-devnet"; then
              echo "Devnet <<parameters.devnet>>-devnet is not running. Skipping tests."
              exit 1
            fi

            # Run the tests
            just acceptance-test "<<parameters.devnet>>" "<<parameters.gate>>"
      - run:
          name: Print results (summary)
          working_directory: op-acceptance-tests
          command: |
            LOG_DIR=$(ls -td -- logs/* | head -1)
            cat "$LOG_DIR/summary.log" || true
      - run:
          name: Print results (failures)
          working_directory: op-acceptance-tests
          command: |
            LOG_DIR=$(ls -td -- logs/* | head -1)
            cat "$LOG_DIR/failed/*.log" || true
          when: on_fail
      - run:
          name: Print results (all)
          working_directory: op-acceptance-tests
          command: |
            LOG_DIR=$(ls -td -- logs/* | head -1)
            cat "$LOG_DIR/all.log" || true
      - run:
          name: Generate JUnit XML test report for CircleCI
          working_directory: op-acceptance-tests
          when: always
          command: |
            LOG_DIR=$(ls -td -- logs/* | head -1)
            gotestsum --junitfile results/results.xml --raw-command cat $LOG_DIR/raw_go_events.log || true
      # Save the module cache for future runs
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      # Store test results and artifacts
      - when:
          condition: always
          steps:
            - store_test_results:
                path: ./op-acceptance-tests/results
      - when:
          condition: always
          steps:
            - store_artifacts:
                path: ./op-acceptance-tests/logs
      # Before we have a more sturdy log dump solution, we'll simply use the kurtosis-specific dump command
      # to store all service logs as job artifacts
      - run:
          name: Dump kurtosis logs
          when: on_fail
          command: |
            # Dump logs & specs
            kurtosis dump ./.kurtosis-dump

            # Remove spec.json files
            rm -rf ./.kurtosis-dump/enclaves/**/*.json

            # Remove all unnecessary logs
            rm -rf ./.kurtosis-dump/enclaves/*/kurtosis-api--*
            rm -rf ./.kurtosis-dump/enclaves/*/kurtosis-logs-collector--*
            rm -rf ./.kurtosis-dump/enclaves/*/task-*
      - when:
          condition: always
          steps:
            - store_artifacts:
                path: ./.kurtosis-dump/enclaves
                destination: op-acceptance-tests/kurtosis-logs
      - when:
          condition: on_fail
          steps:
            - discord-notification-failures-on-develop:
                mentions: "Platforms (<@225161927351992320>) & Protocol (<@590878816004603924>)" # stefano, changwan
                message: "Acceptance tests failed for gate <<parameters.gate>> on devnet <<parameters.devnet>>"

  sanitize-op-program:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: large
    steps:
      - utils/checkout-with-mise
      - run:
          name: Install tools
          command: |
            sudo apt-get update
            sudo apt-get install -y binutils-mips-linux-gnu
      - run:
          name: Build cannon
          command: make cannon
      - run:
          name: Build op-program
          command: make op-program
      - run:
          name: Sanitize op-program client
          command: make sanitize-program GUEST_PROGRAM=../op-program/bin/op-program-client64.elf
          working_directory: cannon

  cannon-prestate-quick:
    machine: true
    resource_class: ethereum-optimism/latitude-1
    steps:
      - utils/checkout-with-mise
      - restore_cache:
          name: Restore cannon prestate cache
          key: cannon-prestate-{{ checksum "./cannon/bin/cannon" }}-{{ checksum "op-program/bin/op-program-client.elf" }}
      - run:
          name: Build prestates
          command: make cannon-prestates
      - save_cache:
          key: cannon-prestate-{{ checksum "./cannon/bin/cannon" }}-{{ checksum "op-program/bin/op-program-client.elf" }}
          name: Save Cannon prestate to cache
          paths:
            - "op-program/bin/prestate*.bin.gz"
            - "op-program/bin/meta*.json"
            - "op-program/bin/prestate-proof*.json"
      - persist_to_workspace:
          root: .
          paths:
            - "op-program/bin/prestate*"
            - "op-program/bin/meta*"
            - "op-program/bin/op-program"
            - "op-program/bin/op-program-client"
            - "cannon/bin"

  cannon-prestate:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - setup_remote_docker
      - run:
          name: Build prestates
          command: make reproducible-prestate
      - persist_to_workspace:
          root: .
          paths:
            - "op-program/bin/prestate*"
            - "op-program/bin/meta*"

  publish-cannon-prestates:
    machine: true
    resource_class: ethereum-optimism/latitude-1
    steps:
      - utils/checkout-with-mise
      - attach_workspace:
          at: "."
      - gcp-cli/install
      - gcp-oidc-authenticate:
          gcp_cred_config_file_path: /tmp/gcp_cred_config.json
          oidc_token_file_path: /tmp/oidc_token.json
      - run:
          name: Upload cannon prestates
          command: |
            # Use the actual hash for tags (hash can be found by reading releases.json)
            PRESTATE_MT64_HASH=$(jq -r .pre ./op-program/bin/prestate-proof-mt64.json)
            PRESTATE_MT64NEXT_HASH=$(jq -r .pre ./op-program/bin/prestate-proof-mt64Next.json)
            PRESTATE_INTEROP_HASH=$(jq -r .pre ./op-program/bin/prestate-proof-interop.json)
            PRESTATE_INTEROP_NEXT_HASH=$(jq -r .pre ./op-program/bin/prestate-proof-interopNext.json)

            BRANCH_NAME=$(echo "<< pipeline.git.branch >>" | tr '/' '-')
            echo "Publishing ${PRESTATE_MT64_HASH}, ${PRESTATE_MT64NEXT_HASH}, ${PRESTATE_INTEROP_HASH}, ${PRESTATE_INTEROP_NEXT_HASH} as ${BRANCH_NAME}"
            if [[ "" != "<< pipeline.git.branch >>" ]]
            then
              # Upload the git commit info for each prestate since this won't be recorded in releases.json
              (echo "Commit=<< pipeline.git.revision >>" && echo "Prestate: ${PRESTATE_MT64_HASH}") | gsutil cp - "gs://oplabs-network-data/proofs/op-program/cannon/${BRANCH_NAME}-mt64.bin.gz.txt"
              (echo "Commit=<< pipeline.git.revision >>" && echo "Prestate: ${PRESTATE_MT64NEXT_HASH}") | gsutil cp - "gs://oplabs-network-data/proofs/op-program/cannon/${BRANCH_NAME}-mt64Next.bin.gz.txt"
              (echo "Commit=<< pipeline.git.revision >>" && echo "Prestate: ${PRESTATE_INTEROP_HASH}") | gsutil cp - "gs://oplabs-network-data/proofs/op-program/cannon/${BRANCH_NAME}-interop.bin.gz.txt"
              (echo "Commit=<< pipeline.git.revision >>" && echo "Prestate: ${PRESTATE_INTEROP_NEXT_HASH}") | gsutil cp - "gs://oplabs-network-data/proofs/op-program/cannon/${BRANCH_NAME}-interopNext.bin.gz.txt"


              # Use the branch name for branches to provide a consistent URL
              PRESTATE_MT64_HASH="${BRANCH_NAME}-mt64"
              PRESTATE_MT64NEXT_HASH="${BRANCH_NAME}-mt64Next"
              PRESTATE_INTEROP_HASH="${BRANCH_NAME}-interop"
              PRESTATE_INTEROP_NEXT_HASH="${BRANCH_NAME}-interopNext"
            fi
            gsutil cp ./op-program/bin/prestate-mt64.bin.gz \
              "gs://oplabs-network-data/proofs/op-program/cannon/${PRESTATE_MT64_HASH}.bin.gz"

            gsutil cp ./op-program/bin/prestate-mt64Next.bin.gz \
              "gs://oplabs-network-data/proofs/op-program/cannon/${PRESTATE_MT64NEXT_HASH}.bin.gz"

            gsutil cp ./op-program/bin/prestate-interop.bin.gz \
              "gs://oplabs-network-data/proofs/op-program/cannon/${PRESTATE_INTEROP_HASH}.bin.gz"

            gsutil cp ./op-program/bin/prestate-interopNext.bin.gz \
              "gs://oplabs-network-data/proofs/op-program/cannon/${PRESTATE_INTEROP_NEXT_HASH}.bin.gz"
      - notify-failures-on-develop:
          mentions: "@proofs-team"

  preimage-reproducibility:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - setup_remote_docker
      - run:
          name: Verify reproducibility
          command: make -C op-program verify-reproducibility
      - store_artifacts:
          path: ./op-program/temp/logs
          when: always
      - notify-failures-on-develop:
          mentions: "@proofs-team"

  cannon-stf-verify:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - setup_remote_docker
      - run:
          name: Build cannon
          command: make cannon
      - run:
          name: Verify the Cannon STF
          command: make -C ./cannon cannon-stf-verify
      - notify-failures-on-develop:
          mentions: "@proofs-team"

  semgrep-scan:
    parameters:
      diff_branch:
        type: string
        default: develop
      scan_command:
        type: string
        default: semgrep ci --timeout=100
    environment:
      TEMPORARY_BASELINE_REF: << parameters.diff_branch >>
      SEMGREP_REPO_URL: << pipeline.project.git_url >>
      SEMGREP_BRANCH: << pipeline.git.branch >>
      SEMGREP_COMMIT: << pipeline.git.revision >>
    docker:
      - image: returntocorp/semgrep
    resource_class: xlarge
    steps:
      - checkout # no need to use mise here since the docker image contains the only dependency
      - unless:
          condition:
            equal: ["develop", << pipeline.git.branch >>]
          steps:
            - run:
                # Scan changed files in PRs, block on new issues only (existing issues ignored)
                # Do a full scan when scanning develop, otherwise do an incremental scan.
                name: "Conditionally set BASELINE env var"
                command: |
                  echo 'export SEMGREP_BASELINE_REF=${TEMPORARY_BASELINE_REF}' >> $BASH_ENV
      - run:
          name: "Set environment variables" # for PR comments and in-app hyperlinks to findings
          command: |
            echo 'export SEMGREP_PR_ID=${CIRCLE_PULL_REQUEST##*/}' >> $BASH_ENV
            echo 'export SEMGREP_JOB_URL=$CIRCLE_BUILD_URL' >> $BASH_ENV
            echo 'export SEMGREP_REPO_NAME=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME' >> $BASH_ENV
      - run:
          name: "Semgrep scan"
          # --timeout (in seconds) limits the time per rule and file.
          #   SEMGREP_TIMEOUT is the same, but docs have conflicting defaults (5s in CLI flag, 1800 in some places)
          #    https://semgrep.dev/docs/troubleshooting/semgrep-app#if-the-job-is-aborted-due-to-taking-too-long
          command: << parameters.scan_command >>
          # If semgrep hangs, stop the scan after 20m, to prevent a useless 5h job
          no_output_timeout: 20m
      - notify-failures-on-develop

  bedrock-go-tests: # just a helper, that depends on all the actual test jobs
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: medium
    steps:
      - run: echo Done

  analyze-op-program-client:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: xlarge
    steps:
      - utils/checkout-with-mise
      - setup_remote_docker
      - run:
          name: Run Analyzer
          command: |
            make run-vm-compat
          working_directory: op-program

  op-program-compat:
    machine: true
    resource_class: ethereum-optimism/latitude-1
    steps:
      - utils/checkout-with-mise
      - run:
          name: Verify Compatibility
          command: |
            make verify-compat
          working_directory: op-program

  check-generated-mocks-op-node:
    machine: true
    resource_class: ethereum-optimism/latitude-1
    steps:
      - utils/checkout-with-mise
      - check-changed:
          patterns: op-node
      - run:
          name: check-generated-mocks
          command: make generate-mocks-op-node && git diff --exit-code

  check-generated-mocks-op-service:
    machine: true
    resource_class: ethereum-optimism/latitude-1
    steps:
      - utils/checkout-with-mise
      - check-changed:
          patterns: op-service
      - run:
          name: check-generated-mocks
          command: make generate-mocks-op-service && git diff --exit-code

  kontrol-tests:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: xlarge
    steps:
      - utils/checkout-with-mise
      - install-contracts-dependencies
      - check-changed:
          no_go_deps: "true"
          patterns: contracts-bedrock/test/kontrol,contracts-bedrock/src/L1/OptimismPortal\.sol,contracts-bedrock/src/L1/OptimismPortal2\.sol,contracts-bedrock/src/L1/L1CrossDomainMessenger\.sol,contracts-bedrock/src/L1/L1ERC721Bridge\.sol,contracts-bedrock/src/L1/L1StandardBridge\.sol,contracts-bedrock/src/L1/ResourceMetering\.sol,contracts-bedrock/src/universal/StandardBridge\.sol,contracts-bedrock/src/universal/ERC721Bridge\.sol,contracts-bedrock/src/universal/CrossDomainMessenger\.sol
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run Kontrol Tests
          command: |
            curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $RV_COMPUTE_TOKEN" \
              https://api.github.com/repos/runtimeverification/optimism-ci/actions/workflows/optimism-ci.yaml/dispatches \
              -d '{
                "ref": "master",
                "inputs": {
                  "branch_name": "<<pipeline.git.branch>>",
                  "extra_args": "script",
                  "statuses_sha": "<< pipeline.git.revision >>",
                  "org": "ethereum-optimism",
                  "repository": "optimism"
                }
              }'
          working_directory: ./packages/contracts-bedrock
      - notify-failures-on-develop

  publish-contract-artifacts:
    machine: true
    resource_class: ethereum-optimism/latitude-1
    steps:
      - gcp-cli/install
      - gcp-oidc-authenticate:
          gcp_cred_config_file_path: /tmp/gcp_cred_config.json
          oidc_token_file_path: /tmp/oidc_token.json
          project_id: GCP_TOOLS_ARTIFACTS_PROJECT_ID
          service_account_email: GCP_CONTRACTS_PUBLISHER_SERVICE_ACCOUNT_EMAIL
      - utils/checkout-with-mise
      - install-contracts-dependencies
      - run:
          name: Pull artifacts
          command: bash scripts/ops/pull-artifacts.sh
          working_directory: packages/contracts-bedrock
      - run:
          name: Build contracts
          environment:
            FOUNDRY_PROFILE: ci
          command: just forge-build
          working_directory: packages/contracts-bedrock
      - run:
          name: Publish artifacts
          command: bash scripts/ops/publish-artifacts.sh
          working_directory: packages/contracts-bedrock

  go-release:
    parameters:
      module:
        description: Go Module Name
        type: string
      filename:
        description: Goreleaser config file
        default: .goreleaser.yaml
        type: string
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: large
    steps:
      - setup_remote_docker
      - gcp-cli/install
      - gcp-oidc-authenticate:
          gcp_cred_config_file_path: /tmp/gcp_cred_config.json
          oidc_token_file_path: /tmp/oidc_token.json
      - utils/checkout-with-mise
      - run:
          name: Configure Docker
          command: |
            gcloud auth configure-docker us-docker.pkg.dev
      - run:
          name: Run goreleaser
          command: |
            goreleaser release --clean -f ./<<parameters.module>>/<<parameters.filename>>

  diff-fetcher-forge-artifacts:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    resource_class: medium
    steps:
      - utils/checkout-with-mise
      - check-changed:
          patterns: packages/contracts-bedrock
      - install-contracts-dependencies
      - run:
          name: Build contracts
          command: |
            just build-contracts
          working_directory: op-fetcher
      - run:
          name: Compare forge artifacts
          command: |
            diff -qr "packages/contracts-bedrock/forge-artifacts/FetchChainInfo.s.sol" \
                    "op-fetcher/pkg/fetcher/fetch/forge-artifacts/FetchChainInfo.s.sol"

            if [ $? -ne 0 ]; then
              echo "ERROR: The checked-in forge artifacts for FetchChainInfo.s.sol do not match the ci build."
              echo "Please run 'just build-contracts' in the op-fetcher directory and commit the changes."
              exit 1
            fi

            echo "âœ… Checked-in forge artifacts match the ci build"

  stale-check:
      machine:
        image: ubuntu-2204:2024.08.1
      steps:
        - utils/github-stale:
            stale-issue-message: 'This issue has been automatically marked as stale and will be closed in 5 days if no updates'
            stale-pr-message: 'This pr has been automatically marked as stale and will be closed in 5 days if no updates'
            close-issue-message: 'This issue was closed as stale.  Please reopen if this is a mistake'
            close-pr-message: 'This PR was closed as stale.  Please reopen if this is a mistake'
            days-before-issue-stale: 999
            days-before-pr-stale: 14
            days-before-issue-close: 5
            days-before-pr-close: 5

  close-issue:
    machine:
      image: ubuntu-2204:2024.08.1
    parameters:
      label_name:
        type: string
      message:
        type: string
    steps:
      - github-cli/install
      - utils/github-event-handler-setup:
          github_event_base64: << pipeline.parameters.github-event-base64 >>
          env_prefix: "github_"
      - run:
          name: Close issue if label is added
          command: |
            if [ ! -z "$github_pull_request_number" ] && [ "$github_label_name" = "$LABEL_NAME" ]; then
                echo "Closing issue $github_pull_request_number as label $LABEL_NAME is added on repository ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} "
                export GH_TOKEN=$GITHUB_TOKEN_GOVERNANCE
                gh issue close --repo "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" "$github_pull_request_number" --comment "$MESSAGE"
            fi
          environment:
            MESSAGE: << parameters.message >>
            LABEL_NAME: << parameters.label_name >>

  devnet-metrics-collect-authorship:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: Collect devnet metrics for op-acceptance-tests
          command: |
            ./devnet-sdk/scripts/metrics-collect-authorship.sh op-acceptance-tests/tests > .metrics--authorship--op-acceptance-tests
            echo "Wrote file .metrics--authorship--op-acceptance-tests"
      - gcp-cli/install
      - gcp-oidc-authenticate:
          gcp_cred_config_file_path: /tmp/gcp_cred_config.json
          oidc_token_file_path: /tmp/oidc_token.json
      - run:
          name: Store artifact in Bucket
          command: |
            CURRENT_DATE=$(date '+%Y-%m-%d')
            FOLDER_NAME="dt=$CURRENT_DATE"

            # Upload to the date-partitioned folder structure
            gsutil cp .metrics--authorship--op-acceptance-tests gs://oplabs-tools-data-public-metrics/metrics-authorship/$FOLDER_NAME/metrics-$CIRCLE_SHA1.csv


workflows:
  main:
    when:
      or:
        - equal: ["webhook",<< pipeline.trigger_source >>]
        - and:
          - equal: [true, <<pipeline.parameters.main_dispatch>>]
          - equal: ["api",<< pipeline.trigger_source >>]
          - equal: [<< pipeline.parameters.github-event-type >>, "__not_set__"] #this is to prevent triggering this workflow as the default value is always set for main_dispatch
    jobs:
      - contracts-bedrock-build:
          name: contracts-bedrock-build
          # Build with just core + script contracts.
          build_args: --deny-warnings --skip test
          context:
            - circleci-repo-readonly-authenticated-github-token
      - check-kontrol-build:
          requires:
            - contracts-bedrock-build
          context:
            - circleci-repo-readonly-authenticated-github-token
      - contracts-bedrock-tests:
          # Test everything except PreimageOracle.t.sol since it's slow.
          name: contracts-bedrock-tests
          test_list: find test -name "*.t.sol" -not -name "PreimageOracle.t.sol"
          context:
            - circleci-repo-readonly-authenticated-github-token
      - contracts-bedrock-tests:
          # PreimageOracle test is slow, run it separately to unblock CI.
          name: contracts-bedrock-tests-preimage-oracle
          test_list: find test -name "PreimageOracle.t.sol"
          context:
            - circleci-repo-readonly-authenticated-github-token
      - contracts-bedrock-tests:
          # Heavily fuzz any fuzz tests within added or modified test files.
          name: contracts-bedrock-tests-heavy-fuzz-modified
          test_list: git diff origin/develop...HEAD --name-only --diff-filter=AM -- './test/**/*.t.sol' | sed 's|packages/contracts-bedrock/||'
          test_timeout: 1h
          test_profile: ciheavy
          context:
            - circleci-repo-readonly-authenticated-github-token
      - contracts-bedrock-coverage:
          # Generate coverage reports.
          name: contracts-bedrock-coverage
          test_timeout: 1h
          test_profile: cicoverage
          # need this requires to ensure that all FFI JSONs exist
          requires:
            - contracts-bedrock-build
          context:
            - circleci-repo-readonly-authenticated-github-token
      - contracts-bedrock-tests-upgrade:
          name: contracts-bedrock-tests-upgrade
          fork_op_chain: op
          fork_base_chain: mainnet
          fork_base_rpc: https://ci-mainnet-l1-archive.optimism.io
          context:
            - circleci-repo-readonly-authenticated-github-token
      - contracts-bedrock-tests-upgrade:
          name: contracts-bedrock-tests-upgrade base-mainnet
          fork_op_chain: base
          fork_base_chain: mainnet
          fork_base_rpc: https://ci-mainnet-l1-archive.optimism.io
          context:
            - circleci-repo-readonly-authenticated-github-token
      - contracts-bedrock-tests-upgrade:
          name: contracts-bedrock-tests-upgrade ink-mainnet
          fork_op_chain: ink
          fork_base_chain: mainnet
          fork_base_rpc: https://ci-mainnet-l1-archive.optimism.io
          context:
            - circleci-repo-readonly-authenticated-github-token
      - contracts-bedrock-tests-upgrade:
          name: contracts-bedrock-tests-upgrade unichain-mainnet
          fork_op_chain: unichain
          fork_base_chain: mainnet
          fork_base_rpc: https://ci-mainnet-l1-archive.optimism.io
          context:
            - circleci-repo-readonly-authenticated-github-token
      - contracts-bedrock-checks:
          requires:
            - contracts-bedrock-build
          context:
            - circleci-repo-readonly-authenticated-github-token
      - contracts-bedrock-frozen-code:
          requires:
            - contracts-bedrock-build
          context:
            - circleci-repo-readonly-authenticated-github-token
      - diff-fetcher-forge-artifacts:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - diff-asterisc-bytecode:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - semgrep-scan:
          name: semgrep-scan-local
          scan_command: semgrep scan --timeout=100 --config .semgrep/rules/ --error .
          context:
            - circleci-repo-readonly-authenticated-github-token
      - semgrep-scan:
          name: semgrep-test
          scan_command: semgrep scan --test --config .semgrep/rules/ .semgrep/tests/
          context:
            - circleci-repo-readonly-authenticated-github-token
      - go-lint:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - fuzz-golang:
          name: fuzz-golang-<<matrix.package_name>>
          on_changes: <<matrix.package_name>>
          matrix:
            parameters:
              package_name:
                - op-challenger
                - op-node
                - op-service
                - op-chain-ops
          context:
            - circleci-repo-readonly-authenticated-github-token
      - fuzz-golang:
          name: cannon-fuzz
          package_name: cannon
          on_changes: cannon,packages/contracts-bedrock/src/cannon
          uses_artifacts: true
          requires: ["contracts-bedrock-build"]
          context:
            - circleci-repo-readonly-authenticated-github-token
      - fuzz-golang:
          name: op-e2e-fuzz
          package_name: op-e2e
          on_changes: op-e2e,packages/contracts-bedrock/src
          uses_artifacts: true
          requires: ["contracts-bedrock-build"]
          context:
            - circleci-repo-readonly-authenticated-github-token
      - go-tests:
          name: go-tests-short
          no_output_timeout: 19m
          test_timeout: 20m
          requires:
            - contracts-bedrock-build
            - cannon-prestate-quick
          context:
            - circleci-repo-readonly-authenticated-github-token
          filters:
            branches:
              ignore: develop  # Run on all branches EXCEPT develop (PR branches only)
      - go-tests:
          name: go-tests-full
          rule: "go-tests-ci"  # Run full test suite instead of short
          no_output_timeout: 89m  # Longer timeout for full tests
          test_timeout: 90m
          notify: true
          filters:
            branches:
              only: develop  # Only runs on develop branch (post-merge)
          requires:
            - contracts-bedrock-build
            - cannon-prestate-quick
          context:
            - circleci-repo-readonly-authenticated-github-token
            - slack
      - analyze-op-program-client:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - op-program-compat:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - bedrock-go-tests:
          requires:
            - go-lint
            - cannon-go-lint-and-test
            - check-generated-mocks-op-node
            - check-generated-mocks-op-service
            - op-program-compat
            # Not needed for the devnet but we want to make sure they build successfully
            - cannon-docker-build
            - op-dispute-mon-docker-build
            - op-program-docker-build
            - op-supervisor-docker-build
            - op-test-sequencer-docker-build
            - go-tests-short
            - sanitize-op-program
          context:
            - circleci-repo-readonly-authenticated-github-tokens
      - docker-build:
          name: <<matrix.docker_name>>-docker-build
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          save_image_tag: <<pipeline.git.revision>>
          matrix:
            parameters:
              docker_name:
                - op-node
                - op-batcher
                - op-faucet
                - op-program
                - op-proposer
                - op-challenger
                - op-dispute-mon
                - op-conductor
                - da-server
                - op-supervisor
                - op-test-sequencer
                - cannon
                - op-dripper
                - op-interop-mon
          context:
            - circleci-repo-readonly-authenticated-github-token
      - cannon-prestate-quick:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - sanitize-op-program:
          requires:
            - cannon-prestate-quick
          context:
            - circleci-repo-readonly-authenticated-github-token
      - check-generated-mocks-op-node:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - check-generated-mocks-op-service:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - cannon-go-lint-and-test:
          requires:
            - contracts-bedrock-build
          skip_slow_tests: true
          notify: true
          context:
            - circleci-repo-readonly-authenticated-github-token
      - todo-issues:
          name: todo-issues-check
          check_closed: false
          context:
            - circleci-repo-readonly-authenticated-github-token
      - shellcheck/check:
          name: shell-check
          # We don't need the `exclude` key as the orb detects the `.shellcheckrc`
          dir: .
          ignore-dirs: ./packages/contracts-bedrock/lib
          context:
            - circleci-repo-readonly-authenticated-github-token

  go-release-deployer:
    jobs:
      - go-release:
          filters:
            tags:
              only: /^op-deployer.*/
            branches:
              ignore: /.*/
          module: op-deployer
          context:
            - oplabs-gcr-release

  release:
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      # Wait for approval on the release
      - hold:
          type: approval
          filters:
            tags:
              only: /^(da-server|cannon|ufm-[a-z0-9\-]*|op-[a-z0-9\-]*)\/v.*/
            branches:
              ignore: /.*/
      # Standard (medium) cross-platform docker images go here
      - docker-build:
          matrix:
            parameters:
              docker_name:
                - op-node
                - op-batcher
                - op-faucet
                - op-proposer
                - op-challenger
                - op-dispute-mon
                - op-conductor
                - da-server
                - op-ufm
                - op-supervisor
                - op-test-sequencer
                - op-deployer
                - cannon
                - op-dripper
                - op-interop-mon
          name: <<matrix.docker_name>>-docker-release
          docker_tags: <<pipeline.git.revision>>
          platforms: "linux/amd64,linux/arm64"
          publish: true
          release: true
          filters:
            tags:
              only: /^<<matrix.docker_name>>\/v.*/
            branches:
              ignore: /.*/
          context:
            - oplabs-gcr-release
          requires:
            - hold
      # Checks for cross-platform images go here
      - check-cross-platform:
          matrix:
            parameters:
              op_component:
                - op-node
                - op-batcher
                - op-faucet
                - op-proposer
                - op-challenger
                - op-dispute-mon
                - op-conductor
                - da-server
                - op-ufm
                - op-supervisor
                - op-test-sequencer
                - op-deployer
                - cannon
                - op-dripper
                - op-interop-mon
          name: <<matrix.op_component>>-cross-platform
          requires:
            - op-node-docker-release
            - op-batcher-docker-release
            - op-faucet-docker-release
            - op-proposer-docker-release
            - op-challenger-docker-release
            - op-dispute-mon-docker-release
            - op-conductor-docker-release
            - da-server-docker-release
            - op-ufm-docker-release
            - op-supervisor-docker-release
            - op-test-sequencer-docker-release
            - cannon-docker-release
            - op-dripper-docker-release
            - op-interop-mon-docker-release
          context:
            - circleci-repo-readonly-authenticated-github-token
      - cannon-prestate:
          filters:
            tags:
              only: /^op-program\/v.*/
            branches:
              ignore: /.*/
          context:
            - circleci-repo-readonly-authenticated-github-token
      - publish-cannon-prestates:
          context:
            - circleci-repo-readonly-authenticated-github-token
            - slack
            - oplabs-network-optimism-io-bucket
          requires:
            - hold
            - cannon-prestate
          filters:
            tags:
              only: /^op-program\/v.*/
            branches:
              ignore: /.*/

  scheduled-todo-issues:
    when:
      equal: [build_four_hours, <<pipeline.schedule.name>>]
    jobs:
      - todo-issues:
          name: todo-issue-checks
          context:
            - slack
            - circleci-repo-readonly-authenticated-github-token

  develop-publish-contract-artifacts:
    when:
      or:
        - and:
          - equal: ["develop", <<pipeline.git.branch>>]
          - equal: ["webhook",<< pipeline.trigger_source >>]
        - and:
          - equal: [true, <<pipeline.parameters.publish_contract_artifacts_dispatch>>]
          - equal: ["api",<< pipeline.trigger_source >>]
    jobs:
      - publish-contract-artifacts:
          context:
            - circleci-repo-readonly-authenticated-github-token

  develop-fault-proofs:
    when:
      or:
        - and:
          - equal: ["develop", <<pipeline.git.branch>>]
          - equal: ["webhook",<< pipeline.trigger_source >>]
        - and:
          - equal: [true, <<pipeline.parameters.fault_proofs_dispatch>>]
          - equal: ["api",<< pipeline.trigger_source >>]
    jobs:
      - cannon-prestate:
          context:
            - circleci-repo-readonly-authenticated-github-token
      - cannon-stf-verify:
          context:
            - slack
            - circleci-repo-readonly-authenticated-github-token
      - contracts-bedrock-build:
          build_args: --deny-warnings --skip test
          context:
            - slack
            - circleci-repo-readonly-authenticated-github-token
      - go-tests-with-fault-proof-deps:
          name: op-e2e-cannon-tests
          notify: true
          mentions: "@proofs-team"
          no_output_timeout: 60m
          test_timeout: 120m
          resource_class: ethereum-optimism/latitude-fps-1
          context:
            - slack
            - circleci-repo-readonly-authenticated-github-token
          requires:
            - contracts-bedrock-build
            - cannon-prestate
      - publish-cannon-prestates:
          context:
            - slack
            - oplabs-network-optimism-io-bucket
            - circleci-repo-readonly-authenticated-github-token
          requires:
            - cannon-prestate
            - op-e2e-cannon-tests

  develop-kontrol-tests:
    when:
      or:
        - and:
          - equal: ["develop", <<pipeline.git.branch>>]
          - equal: ["webhook",<< pipeline.trigger_source >>]
        - and:
          - equal: [true, <<pipeline.parameters.kontrol_dispatch>>]
          - equal: ["api",<< pipeline.trigger_source >>]
    jobs:
      - kontrol-tests:
          context:
            - slack
            - runtimeverification
            - circleci-repo-readonly-authenticated-github-token

  scheduled-cannon-full-tests:
    when:
      or:
        - equal: [build_four_hours, <<pipeline.schedule.name>>]
        - equal: [true, << pipeline.parameters.cannon_full_test_dispatch >>]
    jobs:
      - contracts-bedrock-build:
          build_args: --deny-warnings --skip test
          context:
            - circleci-repo-readonly-authenticated-github-token
      - cannon-go-lint-and-test:
          requires:
            - contracts-bedrock-build
          skip_slow_tests: false
          no_output_timeout: 30m
          notify: true
          context:
            - slack
            - circleci-repo-readonly-authenticated-github-token

  scheduled-docker-publish:
    when:
      or:
        - equal: [build_daily, <<pipeline.schedule.name>>]
        # Trigger on manual triggers if explicitly requested
        - equal: [true, << pipeline.parameters.docker_publish_dispatch >>]
    jobs:
      - docker-build:
          matrix:
            parameters:
              docker_name:
                - op-node
                - op-batcher
                - op-faucet
                - op-program
                - op-proposer
                - op-challenger
                - op-dispute-mon
                - op-conductor
                - op-supervisor
                - op-test-sequencer
                - cannon
                - op-dripper
                - op-interop-mon
          name: <<matrix.docker_name>>-docker-publish
          docker_tags: <<pipeline.git.revision>>,<<pipeline.git.branch>>
          platforms: "linux/amd64,linux/arm64"
          publish: true
          context:
            - oplabs-gcr
            - slack
            - circleci-repo-readonly-authenticated-github-token
      - check-cross-platform:
          matrix:
            parameters:
              op_component:
                - op-node
                - op-batcher
                - op-faucet
                - op-program
                - op-proposer
                - op-challenger
                - op-dispute-mon
                - op-conductor
                - op-supervisor
                - op-test-sequencer
                - cannon
                - op-dripper
                - op-interop-mon
          name: <<matrix.op_component>>-cross-platform
          requires:
            - <<matrix.op_component>>-docker-publish
          context:
            - circleci-repo-readonly-authenticated-github-token

  scheduled-preimage-reproducibility:
    when:
      or:
        - equal: [build_daily, <<pipeline.schedule.name>>]
        # Trigger on manual triggers if explicitly requested
        - equal: [true, << pipeline.parameters.reproducibility_dispatch >>]
    jobs:
      - preimage-reproducibility:
          context:
            - slack
            - circleci-repo-readonly-authenticated-github-token

  scheduled-stale-check:
    when:
      or:
        - equal: [build_daily, <<pipeline.schedule.name>>]
          # Trigger on manual triggers if explicitly requested
        - equal: [true, << pipeline.parameters.stale_check_dispatch >>]
    jobs:
      - stale-check:
          context:
            - circleci-repo-optimism

  # Acceptance tests (post-merge to develop)
  acceptance-tests:
    when:
      or:
        - and:
          - equal: ["develop", <<pipeline.git.branch>>]
          - equal: ["webhook",<< pipeline.trigger_source >>]
        - and:
          - equal: [true, <<pipeline.parameters.acceptance_tests_dispatch>>]
          - equal: ["api",<< pipeline.trigger_source >>]
    jobs:
      # KURTOSIS (Simple)
      - op-acceptance-tests:
          # Acceptance Testing params
          name: kurtosis-simple
          devnet: simple
          gate: base
          # CircleCI params
          no_output_timeout: 30m
          context:
            - circleci-repo-readonly-authenticated-github-token
            - discord
      # KURTOSIS (Isthmus)
      - op-acceptance-tests:
          # Acceptance Testing params
          name: kurtosis-isthmus
          devnet: isthmus
          gate: isthmus
          # CircleCI params
          no_output_timeout: 30m
          context:
            - circleci-repo-readonly-authenticated-github-token
            - discord
      # KURTOSIS (Interop)
      - op-acceptance-tests:
          # Acceptance Testing params
          name: kurtosis-interop
          devnet: interop
          gate: interop
          # CircleCI params
          no_output_timeout: 30m
          context:
            - circleci-repo-readonly-authenticated-github-token
            - discord

  # Acceptance tests (pre-merge to develop)
  acceptance-tests-pr:
    when:
      not:
        equal: [<< pipeline.git.branch >>, "develop"]
    jobs:
      # KURTOSIS (Simple)
      - op-acceptance-tests:
          # Acceptance Testing params
          name: kurtosis-simple
          devnet: simple
          gate: base
          # CircleCI params
          no_output_timeout: 30m
          context:
            - circleci-repo-readonly-authenticated-github-token
            - discord
      # KURTOSIS (Isthmus)
      - op-acceptance-tests:
          # Acceptance Testing params
          name: kurtosis-isthmus
          devnet: isthmus
          gate: isthmus
          # CircleCI params
          no_output_timeout: 30m
          context:
            - circleci-repo-readonly-authenticated-github-token
            - discord
      # KURTOSIS (Interop)
      - op-acceptance-tests:
          # Acceptance Testing params
          name: kurtosis-interop
          devnet: interop
          gate: interop
          # CircleCI params
          no_output_timeout: 30m
          context:
            - circleci-repo-readonly-authenticated-github-token
            - discord

  close-issue-workflow:
    when:
      and:
        - equal: [<< pipeline.trigger_source >>, "api"]
        - equal: [<< pipeline.parameters.github-event-type >>, "pull_request"]
        - equal: [<< pipeline.parameters.github-event-action >>, "labeled"]
    jobs:
      - close-issue:
         label_name: "auto-close-trivial-contribution"
         message: "Thank you for your interest in contributing!
                At this time, we are not accepting contributions that primarily fix spelling, stylistic, or grammatical errors in documentation, code, or elsewhere.
                Please check our [contribution guidelines](https://github.com/ethereum-optimism/optimism/blob/develop/CONTRIBUTING.md#contributions-related-to-spelling-and-grammar) for more information.
                This issue will be closed now."
         context:
          - circleci-repo-optimism

  devnet-metrics-collect:
    when:
      or:
        - equal: [<< pipeline.trigger_source >>, "webhook"]
        - and:
          - equal: [true, << pipeline.parameters.devnet-metrics-collect >>]
          - equal: [<< pipeline.trigger_source >>, "api"]
    jobs:
      - devnet-metrics-collect-authorship:
          context:
            - circleci-repo-readonly-authenticated-github-token
            - oplabs-tools-data-public-metrics-bucket
