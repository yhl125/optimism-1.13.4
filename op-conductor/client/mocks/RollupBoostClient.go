// Code generated by mockery v2.x.x. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/ethereum-optimism/optimism/op-conductor/client"
	mock "github.com/stretchr/testify/mock"
)

// RollupBoostClient is an autogenerated mock type for the RollupBoostClient type
type RollupBoostClient struct {
	mock.Mock
}

// RollupBoostClient_Expecter is a helper object that allows for easy setup of method expectations
type RollupBoostClient_Expecter struct {
	mock *mock.Mock
}

// Expect returns an expecter for RollupBoostClient
func (_m *RollupBoostClient) EXPECT() *RollupBoostClient_Expecter {
	return &RollupBoostClient_Expecter{mock: &_m.Mock}
}

// Healthcheck provides a mock function with given fields: ctx
func (_m *RollupBoostClient) Healthcheck(ctx context.Context) (client.HealthStatus, error) {
	ret := _m.Called(ctx)

	var r0 client.HealthStatus
	if rf, ok := ret.Get(0).(func(context.Context) client.HealthStatus); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(client.HealthStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollupBoostClient_Healthcheck_Call is a *mock.Call that shadows Run/Return methods with type explicit versions for method 'Healthcheck'
type RollupBoostClient_Healthcheck_Call struct {
	*mock.Call
}

// Healthcheck is a helper method to define mock.On call
func (_e *RollupBoostClient_Expecter) Healthcheck(ctx interface{}) *RollupBoostClient_Healthcheck_Call {
	return &RollupBoostClient_Healthcheck_Call{Call: _e.mock.On("Healthcheck", ctx)}
}

func (_c *RollupBoostClient_Healthcheck_Call) Run(run func(ctx context.Context)) *RollupBoostClient_Healthcheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RollupBoostClient_Healthcheck_Call) Return(status client.HealthStatus, err error) *RollupBoostClient_Healthcheck_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *RollupBoostClient_Healthcheck_Call) RunAndReturn(run func(context.Context) (client.HealthStatus, error)) *RollupBoostClient_Healthcheck_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRollupBoostClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewRollupBoostClient creates a new instance of RollupBoostClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRollupBoostClient(t mockConstructorTestingTNewRollupBoostClient) *RollupBoostClient {
	mock := &RollupBoostClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
