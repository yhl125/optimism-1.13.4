// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/ethereum-optimism/optimism/op-service/eth"
	"github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"
)

// NewSequencerControl creates a new instance of SequencerControl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSequencerControl(t interface {
	mock.TestingT
	Cleanup(func())
}) *SequencerControl {
	mock := &SequencerControl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SequencerControl is an autogenerated mock type for the SequencerControl type
type SequencerControl struct {
	mock.Mock
}

type SequencerControl_Expecter struct {
	mock *mock.Mock
}

func (_m *SequencerControl) EXPECT() *SequencerControl_Expecter {
	return &SequencerControl_Expecter{mock: &_m.Mock}
}

// ConductorEnabled provides a mock function for the type SequencerControl
func (_mock *SequencerControl) ConductorEnabled(ctx context.Context) (bool, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ConductorEnabled")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SequencerControl_ConductorEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConductorEnabled'
type SequencerControl_ConductorEnabled_Call struct {
	*mock.Call
}

// ConductorEnabled is a helper method to define mock.On call
//   - ctx
func (_e *SequencerControl_Expecter) ConductorEnabled(ctx interface{}) *SequencerControl_ConductorEnabled_Call {
	return &SequencerControl_ConductorEnabled_Call{Call: _e.mock.On("ConductorEnabled", ctx)}
}

func (_c *SequencerControl_ConductorEnabled_Call) Run(run func(ctx context.Context)) *SequencerControl_ConductorEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SequencerControl_ConductorEnabled_Call) Return(b bool, err error) *SequencerControl_ConductorEnabled_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *SequencerControl_ConductorEnabled_Call) RunAndReturn(run func(ctx context.Context) (bool, error)) *SequencerControl_ConductorEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// LatestUnsafeBlock provides a mock function for the type SequencerControl
func (_mock *SequencerControl) LatestUnsafeBlock(ctx context.Context) (eth.BlockInfo, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LatestUnsafeBlock")
	}

	var r0 eth.BlockInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (eth.BlockInfo, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) eth.BlockInfo); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eth.BlockInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SequencerControl_LatestUnsafeBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestUnsafeBlock'
type SequencerControl_LatestUnsafeBlock_Call struct {
	*mock.Call
}

// LatestUnsafeBlock is a helper method to define mock.On call
//   - ctx
func (_e *SequencerControl_Expecter) LatestUnsafeBlock(ctx interface{}) *SequencerControl_LatestUnsafeBlock_Call {
	return &SequencerControl_LatestUnsafeBlock_Call{Call: _e.mock.On("LatestUnsafeBlock", ctx)}
}

func (_c *SequencerControl_LatestUnsafeBlock_Call) Run(run func(ctx context.Context)) *SequencerControl_LatestUnsafeBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SequencerControl_LatestUnsafeBlock_Call) Return(blockInfo eth.BlockInfo, err error) *SequencerControl_LatestUnsafeBlock_Call {
	_c.Call.Return(blockInfo, err)
	return _c
}

func (_c *SequencerControl_LatestUnsafeBlock_Call) RunAndReturn(run func(ctx context.Context) (eth.BlockInfo, error)) *SequencerControl_LatestUnsafeBlock_Call {
	_c.Call.Return(run)
	return _c
}

// PostUnsafePayload provides a mock function for the type SequencerControl
func (_mock *SequencerControl) PostUnsafePayload(ctx context.Context, payload *eth.ExecutionPayloadEnvelope) error {
	ret := _mock.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for PostUnsafePayload")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *eth.ExecutionPayloadEnvelope) error); ok {
		r0 = returnFunc(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SequencerControl_PostUnsafePayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUnsafePayload'
type SequencerControl_PostUnsafePayload_Call struct {
	*mock.Call
}

// PostUnsafePayload is a helper method to define mock.On call
//   - ctx
//   - payload
func (_e *SequencerControl_Expecter) PostUnsafePayload(ctx interface{}, payload interface{}) *SequencerControl_PostUnsafePayload_Call {
	return &SequencerControl_PostUnsafePayload_Call{Call: _e.mock.On("PostUnsafePayload", ctx, payload)}
}

func (_c *SequencerControl_PostUnsafePayload_Call) Run(run func(ctx context.Context, payload *eth.ExecutionPayloadEnvelope)) *SequencerControl_PostUnsafePayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*eth.ExecutionPayloadEnvelope))
	})
	return _c
}

func (_c *SequencerControl_PostUnsafePayload_Call) Return(err error) *SequencerControl_PostUnsafePayload_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SequencerControl_PostUnsafePayload_Call) RunAndReturn(run func(ctx context.Context, payload *eth.ExecutionPayloadEnvelope) error) *SequencerControl_PostUnsafePayload_Call {
	_c.Call.Return(run)
	return _c
}

// SequencerActive provides a mock function for the type SequencerControl
func (_mock *SequencerControl) SequencerActive(ctx context.Context) (bool, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SequencerActive")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SequencerControl_SequencerActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SequencerActive'
type SequencerControl_SequencerActive_Call struct {
	*mock.Call
}

// SequencerActive is a helper method to define mock.On call
//   - ctx
func (_e *SequencerControl_Expecter) SequencerActive(ctx interface{}) *SequencerControl_SequencerActive_Call {
	return &SequencerControl_SequencerActive_Call{Call: _e.mock.On("SequencerActive", ctx)}
}

func (_c *SequencerControl_SequencerActive_Call) Run(run func(ctx context.Context)) *SequencerControl_SequencerActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SequencerControl_SequencerActive_Call) Return(b bool, err error) *SequencerControl_SequencerActive_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *SequencerControl_SequencerActive_Call) RunAndReturn(run func(ctx context.Context) (bool, error)) *SequencerControl_SequencerActive_Call {
	_c.Call.Return(run)
	return _c
}

// StartSequencer provides a mock function for the type SequencerControl
func (_mock *SequencerControl) StartSequencer(ctx context.Context, hash common.Hash) error {
	ret := _mock.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for StartSequencer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.Hash) error); ok {
		r0 = returnFunc(ctx, hash)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SequencerControl_StartSequencer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSequencer'
type SequencerControl_StartSequencer_Call struct {
	*mock.Call
}

// StartSequencer is a helper method to define mock.On call
//   - ctx
//   - hash
func (_e *SequencerControl_Expecter) StartSequencer(ctx interface{}, hash interface{}) *SequencerControl_StartSequencer_Call {
	return &SequencerControl_StartSequencer_Call{Call: _e.mock.On("StartSequencer", ctx, hash)}
}

func (_c *SequencerControl_StartSequencer_Call) Run(run func(ctx context.Context, hash common.Hash)) *SequencerControl_StartSequencer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *SequencerControl_StartSequencer_Call) Return(err error) *SequencerControl_StartSequencer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SequencerControl_StartSequencer_Call) RunAndReturn(run func(ctx context.Context, hash common.Hash) error) *SequencerControl_StartSequencer_Call {
	_c.Call.Return(run)
	return _c
}

// StopSequencer provides a mock function for the type SequencerControl
func (_mock *SequencerControl) StopSequencer(ctx context.Context) (common.Hash, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StopSequencer")
	}

	var r0 common.Hash
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (common.Hash, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) common.Hash); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SequencerControl_StopSequencer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopSequencer'
type SequencerControl_StopSequencer_Call struct {
	*mock.Call
}

// StopSequencer is a helper method to define mock.On call
//   - ctx
func (_e *SequencerControl_Expecter) StopSequencer(ctx interface{}) *SequencerControl_StopSequencer_Call {
	return &SequencerControl_StopSequencer_Call{Call: _e.mock.On("StopSequencer", ctx)}
}

func (_c *SequencerControl_StopSequencer_Call) Run(run func(ctx context.Context)) *SequencerControl_StopSequencer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SequencerControl_StopSequencer_Call) Return(hash common.Hash, err error) *SequencerControl_StopSequencer_Call {
	_c.Call.Return(hash, err)
	return _c
}

func (_c *SequencerControl_StopSequencer_Call) RunAndReturn(run func(ctx context.Context) (common.Hash, error)) *SequencerControl_StopSequencer_Call {
	_c.Call.Return(run)
	return _c
}
