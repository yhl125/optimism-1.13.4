// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/ethereum-optimism/optimism/op-service/eth"
	mock "github.com/stretchr/testify/mock"
)

// NewSupervisorHealthAPI creates a new instance of SupervisorHealthAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSupervisorHealthAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *SupervisorHealthAPI {
	mock := &SupervisorHealthAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SupervisorHealthAPI is an autogenerated mock type for the SupervisorHealthAPI type
type SupervisorHealthAPI struct {
	mock.Mock
}

type SupervisorHealthAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *SupervisorHealthAPI) EXPECT() *SupervisorHealthAPI_Expecter {
	return &SupervisorHealthAPI_Expecter{mock: &_m.Mock}
}

// SyncStatus provides a mock function for the type SupervisorHealthAPI
func (_mock *SupervisorHealthAPI) SyncStatus(ctx context.Context) (eth.SupervisorSyncStatus, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SyncStatus")
	}

	var r0 eth.SupervisorSyncStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (eth.SupervisorSyncStatus, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) eth.SupervisorSyncStatus); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(eth.SupervisorSyncStatus)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SupervisorHealthAPI_SyncStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncStatus'
type SupervisorHealthAPI_SyncStatus_Call struct {
	*mock.Call
}

// SyncStatus is a helper method to define mock.On call
//   - ctx
func (_e *SupervisorHealthAPI_Expecter) SyncStatus(ctx interface{}) *SupervisorHealthAPI_SyncStatus_Call {
	return &SupervisorHealthAPI_SyncStatus_Call{Call: _e.mock.On("SyncStatus", ctx)}
}

func (_c *SupervisorHealthAPI_SyncStatus_Call) Run(run func(ctx context.Context)) *SupervisorHealthAPI_SyncStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SupervisorHealthAPI_SyncStatus_Call) Return(supervisorSyncStatus eth.SupervisorSyncStatus, err error) *SupervisorHealthAPI_SyncStatus_Call {
	_c.Call.Return(supervisorSyncStatus, err)
	return _c
}

func (_c *SupervisorHealthAPI_SyncStatus_Call) RunAndReturn(run func(ctx context.Context) (eth.SupervisorSyncStatus, error)) *SupervisorHealthAPI_SyncStatus_Call {
	_c.Call.Return(run)
	return _c
}
